// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  phone         String?
  country       String?
  password      String
  emailVerified Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  bookings      Booking[]
}

model Booking {
  id              String   @id @default(cuid())
  userId          String?
  user            User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Agent Information (for B2B bookings)
  agentId         String?
  agent           Agent?   @relation(fields: [agentId], references: [id], onDelete: SetNull)

  // Guest Information (for non-logged-in users)
  guestName       String?
  guestEmail      String?
  guestPhone      String?

  // Package Details
  packageName     String
  packageId       String?

  // Travel Details
  travelDate      DateTime
  duration        String
  hotelCategory   String   // threestar, fourstar, fivestar

  // Traveler Information
  adults          Int      @default(2)
  children3to5    Int      @default(0)
  children6to10   Int      @default(0)

  // Pricing
  totalPrice      Float
  currency        String   @default("EUR")

  // Agent Commission (for B2B bookings)
  commissionAmount Float?
  commissionRate   Float?
  paidAmount       Float?    @default(0)  // Amount paid to agent so far
  remainingAmount  Float?    // Remaining amount to be paid

  // Agent Payment Tracking (money received FROM agent for customer booking)
  agentPaidAmount      Float?    @default(0)  // Amount agent has paid us for this booking
  agentRemainingAmount Float?    // Remaining amount agent owes us (totalPrice - commissionAmount - agentPaidAmount)

  // Booking Status
  status          BookingStatus @default(PENDING)
  paymentStatus   PaymentStatus @default(PENDING)
  fullyPaidAt     DateTime?     // When commission fully paid to agent
  agentFullyPaidAt DateTime?    // When agent has paid us in full for customer booking

  // Additional Information
  specialRequests String?  @db.Text

  // Flight & Preferences (JSON format)
  arrivalFlightNumber   String?
  arrivalFlightTime     String?
  departureFlightNumber String?
  departureFlightTime   String?
  dietaryRequirements   String?  @db.Text  // JSON array
  roomPreferences       String?  @db.Text  // Twin beds, King bed, High floor, etc.
  emergencyContactName  String?
  emergencyContactPhone String?
  travelInsurance       Boolean  @default(false)
  celebrationOccasion   String?  // Honeymoon, Anniversary, Birthday, etc.

  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  confirmedAt     DateTime?
  completedAt     DateTime?

  // Booking Reference Number
  referenceNumber String   @unique

  // Relations
  passengers      Passenger[]

  @@index([userId])
  @@index([agentId])
  @@index([guestEmail])
  @@index([status])
  @@index([referenceNumber])
}

model Passenger {
  id                  String   @id @default(cuid())
  bookingId           String
  booking             Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  // Personal Information (as per passport)
  firstName           String
  middleName          String?
  lastName            String
  dateOfBirth         DateTime
  gender              String   // M, F, Other
  nationality         String

  // Passport Information
  passportNumber      String
  passportExpiry      DateTime
  passportIssuingCountry String

  // Passenger Type
  passengerType       PassengerType  // ADULT, CHILD_3_5, CHILD_6_10

  // Metadata
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@index([bookingId])
}

enum PassengerType {
  ADULT
  CHILD_3_5
  CHILD_6_10
}

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  REFUNDED
}

model ContactInquiry {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String?
  subject   String?
  message   String   @db.Text
  source    String?
  replied   Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([email])
  @@index([createdAt])
}

model Admin {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      String   @default("admin")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Agent {
  id              String      @id @default(cuid())
  email           String      @unique
  password        String

  // Company Details
  companyName     String
  contactName     String
  phone           String
  country         String?
  address         String?     @db.Text

  // Business Details
  commissionRate  Float       @default(10.0)  // Percentage
  status          AgentStatus @default(PENDING)

  // Security
  requirePasswordChange Boolean   @default(false)

  // White Label Settings
  logoUrl         String?
  primaryColor    String?
  companyWebsite  String?

  // Metadata
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  approvedAt      DateTime?
  approvedBy      String?     // Admin ID who approved

  // Relations
  bookings            Booking[]
  dailyTourBookings   DailyTourBooking[] @relation("DailyTourAgentBookings")
  transferBookings    TransferBooking[]  @relation("TransferAgentBookings")
  commissionPayments  CommissionPayment[] @relation("AgentCommissionPayments")

  @@index([email])
  @@index([status])
}

enum AgentStatus {
  PENDING
  ACTIVE
  SUSPENDED
  REJECTED
}

model Package {
  id          String   @id @default(cuid())
  packageId   String   @unique  // 01, 02, etc.
  title       String
  slug        String   @unique
  duration    String
  description String   @db.Text

  // Package Type
  packageType String   @default("WITH_HOTEL")  // WITH_HOTEL, LAND_ONLY, or SHORE_EXCURSION

  // Shore Excursion specific fields
  port        String?  // Cruise port (Istanbul, Kusadasi, Izmir, etc.) - Only for SHORE_EXCURSION
  pickupType  String?  // port, hotel, or both - Only for SHORE_EXCURSION

  // Itinerary (JSON format)
  itinerary   String   @db.Text

  // Highlights
  highlights  String   @db.Text

  // Included/Not Included
  included    String   @db.Text
  notIncluded String   @db.Text

  // Destinations (comma-separated)
  destinations String

  // Pricing (JSON format: {threestar: {single: 450, double: 320, triple: 290}, ...} or {perPerson: 350} for land only or {perPerson: {1pax: 180, 2pax: 95, ...}, children: {...}} for shore excursions)
  pricing     String   @db.Text

  // B2B Agent Pricing (Nett rates - lower than public pricing)
  b2bPricing  String?  @db.Text

  // Hotels (JSON format) - Optional for land-only packages, null for shore excursions
  hotels      String?  @db.Text

  // PDF URL
  pdfUrl      String?

  // Images
  image       String

  // Status
  isActive    Boolean  @default(true)

  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([packageId])
  @@index([slug])
  @@index([packageType])
  @@index([port])
}

model Wishlist {
  id        String   @id @default(cuid())
  userId    String
  packageId String
  createdAt DateTime @default(now())

  @@unique([userId, packageId])
  @@index([userId])
  @@index([packageId])
}

model BlogPost {
  id              String   @id @default(cuid())
  title           String
  slug            String   @unique
  excerpt         String   @db.Text
  content         String   @db.LongText
  coverImage      String
  category        String   // Travel Tips, Destinations, Culture, Food, etc.
  tags            String?  @db.Text  // JSON array

  // SEO
  metaTitle       String?
  metaDescription String?  @db.Text

  // AI Generation
  isAIGenerated   Boolean  @default(false)
  aiPrompt        String?  @db.Text

  // Publishing
  status          BlogStatus @default(DRAFT)
  publishedAt     DateTime?

  // Author
  authorName      String   @default("Funny Tourism")
  authorId        String?

  // Stats
  views           Int      @default(0)

  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([slug])
  @@index([status])
  @@index([category])
  @@index([publishedAt])
}

enum BlogStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model DailyTour {
  id              String   @id @default(cuid())
  tourCode        String   @unique  // T1, T2, etc.
  title           String
  description     String   @db.Text
  duration        String   // "Half Day", "Full Day", "4 Hours", etc.
  city            String   // Istanbul, Cappadocia, Izmir, etc.

  // Pricing structure
  sicPrice        Float    // Per person SIC (Seat-in-Coach) price - guaranteed from 1 pax
  privateMin2     Float    // Per person price for private tour with 2 pax
  privateMin4     Float    // Per person price for private tour with 4 pax
  privateMin6     Float    // Per person price for private tour with 6 pax
  privateMin8     Float    // Per person price for private tour with 8 pax
  privateMin10    Float    // Per person price for private tour with 10 pax

  // Tour details
  included        String?  @db.Text
  notIncluded     String?  @db.Text
  notes           String?  @db.Text

  // Tour information
  port            String?  // Cruise port if applicable (for shore excursions)
  pickupLocations String?  @db.Text  // Pickup points

  // Images & PDF
  image           String?
  pdfUrl          String?

  // Status
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  bookings        DailyTourBooking[]

  @@index([tourCode])
  @@index([city])
  @@index([isActive])
}

model DailyTourBooking {
  id              String    @id @default(cuid())
  tourId          String
  tour            DailyTour @relation(fields: [tourId], references: [id], onDelete: Cascade)

  // User/Guest info
  userId          String?
  guestName       String?
  guestEmail      String
  guestPhone      String

  // Agent Information (for B2B bookings)
  agentId         String?
  agent           Agent?    @relation("DailyTourAgentBookings", fields: [agentId], references: [id], onDelete: SetNull)

  // Booking details
  tourDate        DateTime
  tourType        TourType  // SIC or PRIVATE
  numberOfPax     Int
  totalPrice      Float
  currency        String    @default("EUR")

  // Agent Commission (for B2B bookings)
  commissionAmount Float?
  commissionRate   Float?
  paidAmount       Float?    @default(0)  // Amount paid to agent so far
  remainingAmount  Float?    // Remaining amount to be paid

  // Agent Payment Tracking (money received FROM agent for customer booking)
  agentPaidAmount      Float?    @default(0)  // Amount agent has paid us for this booking
  agentRemainingAmount Float?    // Remaining amount agent owes us (totalPrice - commissionAmount - agentPaidAmount)

  // Pickup details
  pickupLocation  String?
  pickupTime      String?
  hotelName       String?   // If hotel pickup

  // Special requests
  specialRequests String?   @db.Text

  // Status
  status          BookingStatus @default(PENDING)
  paymentStatus   PaymentStatus @default(PENDING)
  fullyPaidAt     DateTime?     // When commission fully paid to agent
  agentFullyPaidAt DateTime?    // When agent has paid us in full for customer booking

  // Reference number
  referenceNumber String    @unique

  // Timestamps
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  confirmedAt     DateTime?

  @@index([tourId])
  @@index([agentId])
  @@index([guestEmail])
  @@index([status])
  @@index([tourDate])
}

enum TourType {
  SIC       // Seat-in-Coach (group tour)
  PRIVATE   // Private tour
}

// ==================== TRANSFER SYSTEM ====================

// Location model for flexible point-to-point transfers
model TransferLocation {
  id              String   @id @default(cuid())

  // Location Details
  name            String   // "Istanbul Atatürk Airport (IST)", "Taksim Square", "Kalkan Hotels"
  code            String?  @unique // "IST", "SAW", "AYT" for airports
  type            LocationType

  // Geographic Info
  region          String   // "Istanbul", "Antalya", "Aegean Coast", etc.
  city            String?  // "Istanbul", "Kalkan", "Kas"
  address         String?  @db.Text // Full address if needed

  // Metadata
  isActive        Boolean  @default(true)
  displayOrder    Int      @default(0) // For sorting in dropdowns

  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  transfersFrom   Transfer[] @relation("FromLocation")
  transfersTo     Transfer[] @relation("ToLocation")

  @@index([type])
  @@index([region])
  @@index([isActive])
  @@index([code])
}

enum LocationType {
  AIRPORT
  CITY_CENTER
  HOTEL_ZONE
  TOURIST_AREA
  CRUISE_PORT
  CUSTOM
}

model Transfer {
  id              String   @id @default(cuid())

  // Route Information (using Location references)
  fromLocationId  String
  fromLocation    TransferLocation @relation("FromLocation", fields: [fromLocationId], references: [id], onDelete: Cascade)
  toLocationId    String
  toLocation      TransferLocation @relation("ToLocation", fields: [toLocationId], references: [id], onDelete: Cascade)

  // Pricing Structure (per vehicle, one way, EUR)
  sicPricePerPerson Float?    // NULL if not available
  price1to2Pax      Float?    // Sedan/small vehicle
  price3to5Pax      Float?    // Minivan (Transporter)
  price6to10Pax     Float?    // Minibus (Sprinter)
  onRequestOnly     Boolean   @default(false) // 10+ pax = "OR"

  // Vehicle Details
  vehicleType1to2   String?   @default("Sedan")
  vehicleType3to5   String?   @default("Minivan (Transporter)")
  vehicleType6to10  String?   @default("Minibus (Sprinter)")

  // Distance & Duration (optional, for display)
  distance          String?   // "45 km"
  duration          String?   // "45 minutes"

  // Status & Validity
  isActive          Boolean   @default(true)
  validFrom         DateTime? // Season validity
  validTo           DateTime?

  // Timestamps
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  bookings          TransferBooking[]

  @@index([fromLocationId])
  @@index([toLocationId])
  @@index([isActive])
  @@unique([fromLocationId, toLocationId]) // Prevent duplicate routes
}

model TransferBooking {
  id                String   @id @default(cuid())
  transferId        String
  transfer          Transfer @relation(fields: [transferId], references: [id], onDelete: Cascade)

  // Customer Info
  userId            String?  // If logged in
  guestName         String
  guestEmail        String
  guestPhone        String

  // Agent Information (for B2B bookings)
  agentId           String?
  agent             Agent?   @relation("TransferAgentBookings", fields: [agentId], references: [id], onDelete: SetNull)

  // Trip Details
  transferDate      DateTime
  transferTime      String   // "09:00", "14:30"
  numberOfPassengers Int
  flightNumber      String?  // Optional

  // Pricing
  totalPrice        Float
  currency          String   @default("EUR")
  vehicleType       String   // Selected vehicle type

  // Agent Commission (for B2B bookings)
  commissionAmount  Float?
  commissionRate    Float?
  paidAmount        Float?   @default(0)  // Amount paid to agent so far
  remainingAmount   Float?   // Remaining amount to be paid

  // Agent Payment Tracking (money received FROM agent for customer booking)
  agentPaidAmount      Float?    @default(0)  // Amount agent has paid us for this booking
  agentRemainingAmount Float?    // Remaining amount agent owes us (totalPrice - commissionAmount - agentPaidAmount)

  // Special Requirements
  specialRequests   String?  @db.Text
  numberOfLuggage   Int?     // Number of bags

  // Status
  status            BookingStatus @default(PENDING)
  paymentStatus     PaymentStatus @default(PENDING)
  fullyPaidAt       DateTime?     // When commission fully paid to agent
  agentFullyPaidAt  DateTime?    // When agent has paid us in full for customer booking
  referenceNumber   String   @unique

  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  confirmedAt       DateTime?

  @@index([transferId])
  @@index([agentId])
  @@index([guestEmail])
  @@index([status])
  @@index([transferDate])
}

// Commission Payment History
model CommissionPayment {
  id              String   @id @default(cuid())
  agentId         String
  agent           Agent    @relation("AgentCommissionPayments", fields: [agentId], references: [id], onDelete: Cascade)

  // Booking Reference
  bookingType     String   // "Package", "DailyTour", "Transfer"
  bookingId       String
  referenceNumber String?  // Optional - can be used for tracking payment reference

  // Payment Details
  amount          Float
  paymentMethod   String?  // "Bank Transfer", "Cash", "PayPal", etc.
  transactionRef  String?  // Bank reference, PayPal ID, etc.
  notes           String?  @db.Text

  // Metadata
  paidBy          String?  // Admin who processed payment
  createdAt       DateTime @default(now())

  @@index([agentId])
  @@index([bookingId])
  @@index([createdAt])
}

// Agent Lead Discovery (for marketing/sales prospecting)
model AgentLead {
  id                        String   @id @default(uuid())
  companyName               String
  email                     String?
  phone                     String?
  website                   String?
  address                   String?  @db.Text
  city                      String?
  country                   String
  source                    String   // "google", "directory", "social", "manual"
  searchQuery               String?  // What search query found this lead
  discovered                DateTime @default(now())
  contacted                 Boolean  @default(false)
  convertedToAgent          Boolean  @default(false)
  emailExtractionAttempted  Boolean  @default(false)  // Track if we tried to extract email
  notes                     String?  @db.Text
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt

  @@index([country, city])
  @@index([contacted])
  @@index([email])
  @@index([emailExtractionAttempted])
}

// Track which cities have been searched to avoid duplicates
model SearchedCity {
  id          String   @id @default(uuid())
  city        String
  country     String
  searchQuery String   // The query used
  method      String   // "google-api" or "google-maps"
  leadsFound  Int      @default(0)
  searchedAt  DateTime @default(now())

  @@unique([city, country, method])
  @@index([country])
}
