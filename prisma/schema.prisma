generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  phone         String?
  country       String?
  password      String
  emailVerified Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  bookings      Booking[]
}

model Booking {
  id                    String        @id @default(cuid())
  userId                String?
  packageName           String
  packageId             String?
  travelDate            DateTime
  duration              String
  hotelCategory         String
  adults                Int           @default(2)
  children3to5          Int           @default(0)
  children6to10         Int           @default(0)
  totalPrice            Float
  currency              String        @default("EUR")
  status                BookingStatus @default(PENDING)
  paymentStatus         PaymentStatus @default(PENDING)
  specialRequests       String?       @db.Text
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  confirmedAt           DateTime?
  completedAt           DateTime?
  referenceNumber       String        @unique
  guestEmail            String?
  guestName             String?
  guestPhone            String?
  agentId               String?
  commissionAmount      Float?
  commissionRate        Float?
  arrivalFlightNumber   String?
  arrivalFlightTime     String?
  celebrationOccasion   String?
  departureFlightNumber String?
  departureFlightTime   String?
  dietaryRequirements   String?       @db.Text
  emergencyContactName  String?
  emergencyContactPhone String?
  roomPreferences       String?       @db.Text
  travelInsurance       Boolean       @default(false)
  fullyPaidAt           DateTime?
  paidAmount            Float?        @default(0)
  remainingAmount       Float?
  agentFullyPaidAt      DateTime?
  agentPaidAmount       Float?        @default(0)
  agentRemainingAmount  Float?
  agent                 Agent?        @relation(fields: [agentId], references: [id])
  user                  User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  passengers            Passenger[]

  @@index([userId])
  @@index([agentId])
  @@index([guestEmail])
  @@index([status])
  @@index([referenceNumber])
}

model Passenger {
  id                     String        @id @default(cuid())
  bookingId              String
  firstName              String
  middleName             String?
  lastName               String
  dateOfBirth            DateTime
  gender                 String
  nationality            String
  passportNumber         String
  passportExpiry         DateTime
  passportIssuingCountry String
  passengerType          PassengerType
  createdAt              DateTime      @default(now())
  updatedAt              DateTime      @updatedAt
  booking                Booking       @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@index([bookingId])
}

model ContactInquiry {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String?
  subject   String?
  message   String   @db.Text
  source    String?
  replied   Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([email])
  @@index([createdAt])
}

model Admin {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      String   @default("admin")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Agent {
  id                    String              @id @default(cuid())
  email                 String              @unique
  password              String
  companyName           String
  contactName           String
  phone                 String
  country               String?
  address               String?             @db.Text
  commissionRate        Float               @default(10)
  status                AgentStatus         @default(PENDING)
  logoUrl               String?
  primaryColor          String?
  companyWebsite        String?
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  approvedAt            DateTime?
  approvedBy            String?
  requirePasswordChange Boolean             @default(false)
  bookings              Booking[]
  commissionPayments    CommissionPayment[] @relation("AgentCommissionPayments")
  dailyTourBookings     DailyTourBooking[]  @relation("DailyTourAgentBookings")
  transferBookings      TransferBooking[]   @relation("TransferAgentBookings")

  @@index([email])
  @@index([status])
}

model Package {
  id                  String   @id @default(cuid())
  packageId           String   @unique
  title               String
  slug                String   @unique
  duration            String
  description         String   @db.Text
  packageType         String   @default("WITH_HOTEL")
  itinerary           String   @db.Text
  highlights          String   @db.Text
  included            String   @db.Text
  notIncluded         String   @db.Text
  destinations        String
  pricing             String   @db.Text
  hotels              String?  @db.Text
  pdfUrl              String?
  image               String
  isActive            Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  b2bPricing          String?  @db.Text
  pickupType          String?
  port                String?
  accommodationInfoEs String?  @db.Text
  descriptionEs       String?  @db.Text
  excludedEs          String?  @db.Text
  highlightsEs        String?  @db.Text
  hotelsEs            String?  @db.Text
  importantInfoEs     String?  @db.Text
  includedEs          String?  @db.Text
  itineraryEs         String?  @db.Text
  titleEs             String?

  @@index([packageId])
  @@index([slug])
  @@index([packageType])
  @@index([port])
}

model Wishlist {
  id        String   @id @default(cuid())
  userId    String
  packageId String
  createdAt DateTime @default(now())

  @@unique([userId, packageId])
  @@index([userId])
  @@index([packageId])
}

model BlogPost {
  id              String     @id @default(cuid())
  title           String
  slug            String     @unique
  excerpt         String     @db.Text
  content         String     @db.LongText
  coverImage      String
  category        String
  tags            String?    @db.Text
  metaTitle       String?
  metaDescription String?    @db.Text
  isAIGenerated   Boolean    @default(false)
  aiPrompt        String?    @db.Text
  status          BlogStatus @default(DRAFT)
  publishedAt     DateTime?
  authorName      String     @default("Funny Tourism")
  authorId        String?
  views           Int        @default(0)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  contentEs       String?    @db.LongText
  excerptEs       String?    @db.Text
  titleEs         String?

  @@index([slug])
  @@index([status])
  @@index([category])
  @@index([publishedAt])
}

model DailyTour {
  id              String             @id @default(cuid())
  tourCode        String             @unique
  title           String
  description     String             @db.Text
  duration        String
  city            String
  sicPrice        Float
  privateMin2     Float
  privateMin4     Float
  privateMin6     Float
  privateMin8     Float
  privateMin10    Float
  included        String?            @db.Text
  notIncluded     String?            @db.Text
  notes           String?            @db.Text
  port            String?
  pickupLocations String?            @db.Text
  image           String?
  pdfUrl          String?
  isActive        Boolean            @default(true)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  descriptionEs   String?            @db.Text
  excludedEs      String?            @db.Text
  includedEs      String?            @db.Text
  notesEs         String?            @db.Text
  titleEs         String?
  bookings        DailyTourBooking[]

  @@index([tourCode])
  @@index([city])
  @@index([isActive])
}

model DailyTourBooking {
  id                   String        @id @default(cuid())
  tourId               String
  userId               String?
  guestName            String?
  guestEmail           String
  guestPhone           String
  tourDate             DateTime
  tourType             TourType
  numberOfPax          Int
  totalPrice           Float
  currency             String        @default("EUR")
  pickupLocation       String?
  pickupTime           String?
  hotelName            String?
  specialRequests      String?       @db.Text
  status               BookingStatus @default(PENDING)
  paymentStatus        PaymentStatus @default(PENDING)
  referenceNumber      String        @unique
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  confirmedAt          DateTime?
  agentId              String?
  commissionAmount     Float?
  commissionRate       Float?
  fullyPaidAt          DateTime?
  paidAmount           Float?        @default(0)
  remainingAmount      Float?
  agentFullyPaidAt     DateTime?
  agentPaidAmount      Float?        @default(0)
  agentRemainingAmount Float?
  agent                Agent?        @relation("DailyTourAgentBookings", fields: [agentId], references: [id])
  tour                 DailyTour     @relation(fields: [tourId], references: [id], onDelete: Cascade)

  @@index([tourId])
  @@index([agentId])
  @@index([guestEmail])
  @@index([status])
  @@index([tourDate])
}

model TransferLocation {
  id            String       @id @default(cuid())
  name          String
  code          String?      @unique
  type          LocationType
  region        String
  city          String?
  address       String?      @db.Text
  isActive      Boolean      @default(true)
  displayOrder  Int          @default(0)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  transfersFrom Transfer[]   @relation("FromLocation")
  transfersTo   Transfer[]   @relation("ToLocation")

  @@index([type])
  @@index([region])
  @@index([isActive])
  @@index([code])
}

model Transfer {
  id                String            @id @default(cuid())
  sicPricePerPerson Float?
  price1to2Pax      Float?
  price3to5Pax      Float?
  price6to10Pax     Float?
  onRequestOnly     Boolean           @default(false)
  vehicleType1to2   String?           @default("Sedan")
  vehicleType3to5   String?           @default("Minivan (Transporter)")
  vehicleType6to10  String?           @default("Minibus (Sprinter)")
  distance          String?
  duration          String?
  isActive          Boolean           @default(true)
  validFrom         DateTime?
  validTo           DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  fromLocationId    String
  toLocationId      String
  fromLocation      TransferLocation  @relation("FromLocation", fields: [fromLocationId], references: [id], onDelete: Cascade)
  toLocation        TransferLocation  @relation("ToLocation", fields: [toLocationId], references: [id], onDelete: Cascade)
  bookings          TransferBooking[]

  @@unique([fromLocationId, toLocationId])
  @@index([fromLocationId])
  @@index([toLocationId])
  @@index([isActive])
}

model TransferBooking {
  id                   String        @id @default(cuid())
  transferId           String
  userId               String?
  guestName            String
  guestEmail           String
  guestPhone           String
  transferDate         DateTime
  transferTime         String
  numberOfPassengers   Int
  flightNumber         String?
  totalPrice           Float
  currency             String        @default("EUR")
  vehicleType          String
  specialRequests      String?       @db.Text
  numberOfLuggage      Int?
  status               BookingStatus @default(PENDING)
  paymentStatus        PaymentStatus @default(PENDING)
  referenceNumber      String        @unique
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  confirmedAt          DateTime?
  agentId              String?
  commissionAmount     Float?
  commissionRate       Float?
  fullyPaidAt          DateTime?
  paidAmount           Float?        @default(0)
  remainingAmount      Float?
  agentFullyPaidAt     DateTime?
  agentPaidAmount      Float?        @default(0)
  agentRemainingAmount Float?
  agent                Agent?        @relation("TransferAgentBookings", fields: [agentId], references: [id])
  transfer             Transfer      @relation(fields: [transferId], references: [id], onDelete: Cascade)

  @@index([transferId])
  @@index([agentId])
  @@index([guestEmail])
  @@index([status])
  @@index([transferDate])
}

model CommissionPayment {
  id              String   @id @default(cuid())
  agentId         String
  bookingType     String
  bookingId       String
  referenceNumber String?
  amount          Float
  paymentMethod   String?
  transactionRef  String?
  notes           String?  @db.Text
  paidBy          String?
  createdAt       DateTime @default(now())
  agent           Agent    @relation("AgentCommissionPayments", fields: [agentId], references: [id], onDelete: Cascade)

  @@index([agentId])
  @@index([bookingId])
  @@index([createdAt])
}

model AgentLead {
  id                       String   @id @default(uuid())
  companyName              String
  email                    String?
  phone                    String?
  website                  String?
  address                  String?  @db.Text
  city                     String?
  country                  String
  source                   String
  searchQuery              String?
  googlePlaceId            String?  @db.VarChar(255)
  discovered               DateTime @default(now())
  contacted                Boolean  @default(false)
  convertedToAgent         Boolean  @default(false)
  notes                    String?  @db.Text
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  emailExtractionAttempted Boolean  @default(false)

  @@index([country, city])
  @@index([contacted])
  @@index([email])
  @@index([emailExtractionAttempted])
  @@index([googlePlaceId])
}

model SearchedCity {
  id          String   @id @default(uuid())
  city        String
  country     String
  searchQuery String
  method      String
  leadsFound  Int      @default(0)
  searchedAt  DateTime @default(now())

  @@unique([city, country, method])
  @@index([country])
}

model Destination {
  id                String   @id @default(cuid())
  name              String   @unique
  slug              String   @unique
  description       String   @db.Text
  category          String
  region            String
  heroImage         String
  gradient          String   @default("from-blue-500 to-blue-700")
  attractions       String   @db.Text
  experiences       String   @db.Text
  bestTimeToVisit   String?  @db.Text
  gettingThere      String?  @db.Text
  isActive          Boolean  @default(true)
  displayOrder      Int      @default(0)
  metaTitle         String?
  metaDescription   String?  @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  attractionsEs     String?  @db.Text
  bestTimeToVisitEs String?  @db.Text
  descriptionEs     String?  @db.Text
  experiencesEs     String?  @db.Text
  gettingThereEs    String?  @db.Text
  metaDescriptionEs String?  @db.Text
  metaTitleEs       String?
  nameEs            String?

  @@index([slug])
  @@index([category])
  @@index([region])
  @@index([isActive])
}

model TurkishCity {
  id              String   @id @default(cuid())
  name            String   @unique
  displayName     String
  region          String
  type            String   @default("DESTINATION")
  description     String?  @db.Text
  popularityScore Int      @default(0)
  latitude        Float?
  longitude       Float?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([name])
  @@index([popularityScore])
  @@index([isActive])
}

model CustomItinerary {
  id                   String          @id @default(uuid())
  customerName         String
  customerEmail        String
  customerPhone        String?
  requestedCities      String          @db.Text
  startDate            DateTime
  adults               Int
  children             Int             @default(0)
  hotelCategory        String
  tourType             String
  specialRequests      String?         @db.Text
  generatedItinerary   String          @db.LongText
  hotelRecommendations String          @db.Text
  includedServices     String          @db.Text
  notIncludedServices  String          @db.Text
  totalPrice           Float
  priceBreakdown       String          @db.Text
  currency             String          @default("EUR")
  aiModel              String          @default("claude-sonnet-4.5")
  generationTimeMs     Int?
  tokensUsed           Int?
  status               ItineraryStatus @default(PENDING)
  viewCount            Int             @default(0)
  lastViewedAt         DateTime?
  bookingId            String?         @unique
  emailSentAt          DateTime?
  emailOpenedAt        DateTime?
  adminNotes           String?         @db.Text
  followUpRequired     Boolean         @default(true)
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  convertedToBookingAt DateTime?

  @@index([customerEmail])
  @@index([status])
  @@index([createdAt])
  @@index([followUpRequired])
  @@index([startDate])
}

enum PassengerType {
  ADULT
  CHILD_3_5
  CHILD_6_10
}

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  REFUNDED
}

enum AgentStatus {
  PENDING
  ACTIVE
  SUSPENDED
  REJECTED
}

enum BlogStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum TourType {
  SIC
  PRIVATE
}

enum LocationType {
  AIRPORT
  CITY_CENTER
  HOTEL_ZONE
  TOURIST_AREA
  CRUISE_PORT
  CUSTOM
}

enum ItineraryStatus {
  PENDING
  VIEWED
  INTERESTED
  QUOTE_REQUESTED
  BOOKED
  CANCELLED
}
